generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRIVATE_URL") 
}

model User {
  id       String   @id @default(cuid())  
  username String   @unique
  email    String   @unique
  password String
  banned   Boolean  @default(false)
  role     String   @default("user")  
  croom    Room[] 
  messages Message[] 
  roomId   String?  
  room     Room?    @relation("UserRoom", fields: [roomId], references: [id], onDelete: Cascade)
  emailVerified    Boolean  @default(false)
  verificationCode String?
  resetCode String? 
  online    Boolean @default(false)
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")
}

model Friendship {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime @default(now())

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id        String   @id @default(cuid())  
  content   String
  createdAt DateTime @default(now())

  senderId String  
  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  roomId   String  
  room     Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Room {
  id        String   @id @default(cuid())
  name      String
  userId    String   
  startsAt  DateTime @default(now())   
  expiresAt DateTime
  active    Boolean  @default(false) 

  messages  Message[]
  creator   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  location  Unsupported("geometry(Point, 4326)")
  users     User[]   @relation("UserRoom")
}
